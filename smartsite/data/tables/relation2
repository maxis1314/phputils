id	word1	word2	relation	created_at	updated_at	who
RWZvdas	WEB-INF/lib	*.jar	放jar库文件	2009/10/04 19:13:41	2009/10/04 19:16:02	j2ee
fMHtGDx	WEB-INF/web.xml	<servlet></servlet>	定义servlet名以及其所对应的类	2009/10/04 19:24:18		j2ee
yqdE5b2	WEB-INF/web.xml	<servlet-mapping></servlet-mapping>	定义servlet名和url的对应关系	2009/10/04 19:29:56		j2ee
HIy4cjS	WEB-INF/web.xml	<welcome-file-list></welcome-file-list>	定义初始访问文件	2009/10/04 19:30:29		j2ee
p2aJ3Cf	Src	Package	定义javabean以及servlet	2009/10/04 20:28:53		j2ee
fU9s7cE	Form	Servlet	对应方法<form     action="servlet名">	2009/10/04 20:32:59	2009/10/04 20:34:02	j2ee
f2jBRWf	Servlet	跳转	response.sendRedirect("page/jsp/index.jsp");	2009/10/04 20:35:19	2009/10/04 20:57:27	j2ee
NaWMFcx	Servlet	设置编码	response.setContentType("text/html");[CRLF]Request.setCharacterEncoding("utf-8");	2009/10/04 20:35:45	2009/10/04 20:36:04	j2ee
9h2NDCL	Session	取得值	JSP中session.getAttribute("loginUser");	2009/10/04 20:39:35	2009/10/04 20:43:37	j2ee
hIyc2hS	Session	设置值	Javabean中request.getSession().setAttribute("loginUser",User);[CRLF]JSP中session.setAttribute("rand", sRand);	2009/10/04 20:40:27	2009/10/04 20:50:45	j2ee
TtkiZr6	Jsp	取得参数	request.getParameter("id");	2009/10/04 20:44:13	2009/10/04 20:45:08	j2ee
jrajrak	Jsp	使用javabean	<jsp:useBean id="messageBean" class="web.bean.bean.MessageBean"></jsp:useBean>[CRLF]List<Message> list = messageBean.findAll();	2009/10/04 20:49:25	2009/10/04 20:54:45	j2ee
rNpsD4u	Jsp	显示数组	List<Message> currentList = list.subList(start, end);[CRLF]for(Message message : currentList) {[CRLF]  message.getLeaveWord()[CRLF]}	2009/10/04 20:52:26	2009/10/04 21:47:34	j2ee
208Kv89	Struts	配置文件	struts-config.xml	2009/10/04 21:08:37		j2ee
ZPvxfUI	WEB-INF/web.xml	使用struts做action映射	<servlet>[CRLF]    <servlet-name>action</servlet-name>[CRLF]    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>[CRLF]    <init-param>[CRLF]      <param-name>config</param-name>[CRLF]      <param-value>/WEB-INF/struts-config.xml</param-value>[CRLF]    </init-param>[CRLF]    <init-param>[CRLF]      <param-name>debug</param-name>[CRLF]      <param-value>3</param-value>[CRLF]    </init-param>[CRLF]    <init-param>[CRLF]      <param-name>detail</param-name>[CRLF]      <param-value>3</param-value>[CRLF]    </init-param>[CRLF]    <load-on-startup>0</load-on-startup>[CRLF]  </servlet>[CRLF]  <servlet-mapping>[CRLF]    <servlet-name>action</servlet-name>[CRLF]    <url-pattern>*.do</url-pattern>[CRLF]  </servlet-mapping>	2009/10/04 21:23:09	2009/10/04 21:23:29	j2ee
LMRfNVA	Struts	Struts-config.xml	配置文件	2009/10/04 21:33:07	2009/10/04 21:33:16	j2ee
z9XizwA	Struts-config.xml	FormBean定义	<form-beans >[CRLF]    <form-bean name="loginForm" type="struts.form.LoginForm" />[CRLF][CRLF]  </form-beans>	2009/10/04 21:33:56	2009/10/04 21:34:02	j2ee
5wactu8	Struts-config.xml	Action映射	<action-mappings >[CRLF]    <action[CRLF]      attribute="loginForm"[CRLF]      input="/index.jsp"[CRLF]      name="loginForm"[CRLF]      path="/login"[CRLF]      scope="request"[CRLF]      type="org.springframework.web.struts.DelegatingActionProxy">[CRLF]      <forward name="suc" path="/suc.jsp" />[CRLF]      <forward name="fail" path="/fail.jsp" />[CRLF]    </action>[CRLF]  </action-mappings>	2009/10/04 21:34:47	2009/10/04 21:34:53	j2ee
L9xck96	Struts-config.xml	Spring插件	<plug-in className="org.springframework.web.struts.ContextLoaderPlugIn">[CRLF]     <set-property property="contextConfigLocation"[CRLF]               value="/WEB-INF/classes/applicationContext.xml"/>[CRLF]  </plug-in>	2009/10/04 21:35:48	2009/10/04 21:35:53	j2ee
VkFX5no	Struts	From写法	<form action=login.do name=form1 method=post>[CRLF] name:  <input type=text name="name"><br>[CRLF] password  <input type=password name="psw"><br>[CRLF]   <input type=submit value="submit">[CRLF]</form>	2009/10/04 21:39:20	2009/10/04 21:39:26	j2ee
O40hSee	Struts	跳转	return mapping.findForward("suc"); 	2009/10/04 22:24:43		j2ee
kgvKMOO	J2EE	MYSQL连接	public class DBConn {[CRLF]    [CRLF]    /**[CRLF]     * 数据库连接url,数据库名,数据库密码[CRLF]     */[CRLF]    private static String dbUrl = "jdbc:mysql://localhost:3306/message";[CRLF]    private static String dbUserName = "root";[CRLF]    private static String dbPassword = "test";[CRLF]    [CRLF]    /**[CRLF]     * 获得数据库连接[CRLF]     * 静态方法,由类直接调用,不用新建对象再调用[CRLF]     * 静态方法里用到的方法外面的变量都必须为静态变量[CRLF]     * @return[CRLF]     */[CRLF]    public static Connection getConnection() {[CRLF]        Connection conn = null;[CRLF]        try{[CRLF]            Class.forName("com.mysql.jdbc.Driver");  //这句相当于new com.mysql.jdbc.Driver();[CRLF]        }catch(Exception e) {[CRLF]            System.out.println("找不到数据库驱动类!");[CRLF]            e.printStackTrace();[CRLF]        }[CRLF]        try{[CRLF]            conn = DriverManager.getConnection(dbUrl, dbUserName, dbPassword);[CRLF]        }[CRLF]        catch(Exception e) {[CRLF]            System.out.println("获取数据库连接出错!");[CRLF]            e.printStackTrace();[CRLF]        }[CRLF]        return conn;[CRLF]    }[CRLF][CRLF]}	2009/10/05 20:01:17	2009/10/05 20:02:35	j2ee
3uRAnSS				2009/10/05 20:01:22
63ok7vJ	J2EE	MYSQL查询	public List<Message> findAll() {[CRLF]        // 获取数据库连接[CRLF]        conn = DBConn.getConnection();[CRLF]        // 新建一个List对象,用来存放结果[CRLF]        List<Message> list = new ArrayList<Message>();[CRLF]        // 查找所有留言信息的SQL语句[CRLF]        String sql = "select * from t_messageboard order by id desc";[CRLF]        //执行查找操作[CRLF]        try {[CRLF]            // 通过数据库连接对象获得数据库操作对象[CRLF]            stmt = conn.createStatement();[CRLF]            // 执行查询语句,获得结果集[CRLF]            rs = stmt.executeQuery(sql);[CRLF]            // 循环结果集,并将结果用Message封装后放入List中[CRLF]            while (rs.next()) {[CRLF]                Message message = new Message();[CRLF]                // 构造Message 对象[CRLF]                message.setId(rs.getInt("id"));[CRLF]                message.setTitle(rs.getString("title"));[CRLF]                message.setGuestName(rs.getString("guestName"));[CRLF]                message.setQq(rs.getString("qq"));[CRLF]                message.setEmail(rs.getString("email"));[CRLF]                message.setHomepageUrl(rs.getString("homepageUrl"));[CRLF]                message.setSex(rs.getString("sex"));[CRLF]                message.setPic(rs.getString("pic"));[CRLF]                message.setLeaveWord(rs.getString("leaveWord"));[CRLF]                message.setCreateTime(rs.getDate("createtime"));[CRLF]                message.setIp(rs.getString("ip"));[CRLF][CRLF]                // 将对象放入list[CRLF]                list.add(message);[CRLF]            }[CRLF]        } catch (Exception e) {[CRLF]            // 执行数据库操作有可能出错,比如连接中断等,打印出错误轨迹,方便跟踪错误[CRLF]            e.printStackTrace();[CRLF]        } finally {[CRLF]            // 关闭数据库连接,释放资源[CRLF]            closeDB();[CRLF]        }[CRLF]        // 返回结果[CRLF]        return list;[CRLF]    }	2009/10/05 20:02:53	2009/10/05 20:03:09	j2ee
qL3iPEG	J2EE	MYSQL保存	public void saveMessage(Message message) {[CRLF]        // 获得数据库连接[CRLF]        conn = DBConn.getConnection();[CRLF]        // 构造插入留言信息的SQL语句,其中"?"的值由pstmt动态赋予.[CRLF]        String sql = "insert into t_messageboard"[CRLF]                + "(title,guestname,qq,email,homepageUrl,sex,pic,leaveWord,ip,createTime)"[CRLF]                + " values(?,?,?,?,?,?,?,?,?,now())";[CRLF]        //执行保存操作[CRLF]        try {[CRLF]            // 获取数据库操作对象pstmt,和stmt不同的是:stmt必须执行已经写好的SQL语句,而pstmt则可以设置参数[CRLF]            pstmt = conn.prepareStatement(sql);[CRLF]            // 设置参数,填满SQL语句的"?"[CRLF]            pstmt.setString(1, message.getTitle());[CRLF]            pstmt.setString(2, message.getGuestName());[CRLF]            pstmt.setString(3, message.getQq());[CRLF]            pstmt.setString(4, message.getEmail());[CRLF]            pstmt.setString(5, message.getHomepageUrl());[CRLF]            pstmt.setString(6, message.getSex());[CRLF]            pstmt.setString(7, message.getPic());[CRLF]            pstmt.setString(8, message.getLeaveWord());[CRLF]            pstmt.setString(9, message.getIp());[CRLF][CRLF]            pstmt.executeUpdate();[CRLF]        } catch (Exception e) {[CRLF]            e.printStackTrace();[CRLF]        } finally {[CRLF]            closeDB();[CRLF]        }[CRLF]    }[CRLF]	2009/10/05 20:03:35	2009/10/05 20:03:40	j2ee
Wn4s7Z3	J2EE	MYSQL删除	    public void deleteMessage(int id) {[CRLF]        // 获得数据库连接[CRLF]        conn = DBConn.getConnection();[CRLF]        // 删除留言信息的SQL语句[CRLF]        String sql = "delete from t_messageboard where id=?";[CRLF]        [CRLF]        //执行删除操作[CRLF]        try {[CRLF]            pstmt = conn.prepareStatement(sql);[CRLF]            // 将传进来的id填满SQL语句[CRLF]            pstmt.setInt(1, id);[CRLF]            [CRLF]            //[CRLF]            pstmt.execute();[CRLF]        } catch (Exception e) {[CRLF]            e.printStackTrace();[CRLF]        } finally {[CRLF]            closeDB();[CRLF]        }[CRLF]    }	2009/10/05 20:06:11		j2ee
4GZ7vGj	J2EE	MYSQL关闭数据库	    private void closeDB() {[CRLF]        if (rs != null) {[CRLF]            try {[CRLF]                rs.close();[CRLF]            } catch (Exception e) {[CRLF]                e.printStackTrace();[CRLF]            }[CRLF]        }[CRLF]        if (stmt != null) {[CRLF]            try {[CRLF]                stmt.close();[CRLF]            } catch (Exception e) {[CRLF]                e.printStackTrace();[CRLF]            }[CRLF]        }[CRLF]        if (pstmt != null) {[CRLF]            try {[CRLF]                pstmt.close();[CRLF]            } catch (Exception e) {[CRLF]                e.printStackTrace();[CRLF]            }[CRLF]        }[CRLF]        if (conn != null) {[CRLF]            try {[CRLF]                conn.close();[CRLF]            } catch (Exception e) {[CRLF]                e.printStackTrace();[CRLF]            }[CRLF]        }[CRLF]    }	2009/10/05 20:06:31		j2ee
vfYFyOW	WEB-INF/hibernate.xml	MYSQL配置	<?xml version="1.0" ?>[CRLF]<!DOCTYPE hibernate-configuration PUBLIC [CRLF]"-//Hibernate/Hibernate Configuration DTD//EN"[CRLF]"http://hibernate.sourceforge.net/hibernate-configuration-2.0.dtd" >[CRLF]<hibernate-configuration>[CRLF]    <session-factory>[CRLF]        <!--MySQL JDBC Driver connection -->[CRLF]        <property name="connection.driver_class">org.gjt.mm.mysql.Driver</property>[CRLF]        <property name="connection.url">jdbc:mysql:///ogis</property>[CRLF]        <property name="connection.username">root</property>[CRLF]        <property name="connection.password"></property>[CRLF]        <property name="dialect">net.sf.hibernate.dialect.MySQLDialect</property>[CRLF]        <property name="transaction.factory_class">[CRLF]            net.sf.hibernate.transaction.JDBCTransactionFactory[CRLF]        </property>[CRLF][CRLF]        <!-- Mapping files -->[CRLF]        <mapping resource="entity\DEPARTMENT.hbm.xml"/>[CRLF]        <mapping resource="entity\EMPLOYEE.hbm.xml"/>[CRLF]    </session-factory>[CRLF]</hibernate-configuration>[CRLF]	2009/10/05 20:20:01	2009/10/05 20:23:39	j2ee
0HikNBP	Hibernate	映射文件	<?xml version="1.0"?>[CRLF][CRLF]<!DOCTYPE hibernate-mapping PUBLIC[CRLF]    "-//Hibernate/Hibernate Mapping DTD 2.0//EN" [CRLF]    "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">[CRLF][CRLF]<hibernate-mapping>[CRLF]    <class[CRLF]        name="springexample.hibernate.Customer"[CRLF]        table="TBL_CUSTOMER"[CRLF]        dynamic-update="false"[CRLF]        dynamic-insert="false">[CRLF][CRLF]        <id[CRLF]            name="id"[CRLF]            column="CUSTOMER_ID"[CRLF]            type="java.lang.Long"[CRLF]            unsaved-value="-1"[CRLF]        >[CRLF]            <generator class="native">[CRLF]            </generator>[CRLF]        </id>[CRLF]        [CRLF]     [CRLF]        <set name ="accounts"[CRLF]             inverse = "true"[CRLF]              cascade="all-delete-orphan">[CRLF]             <key column ="CUSTOMER_ID"/>[CRLF]             <one-to-many class="springexample.hibernate.Account"/>[CRLF]            [CRLF]            </set>[CRLF]    [CRLF]        <property[CRLF]            name="email"[CRLF]            type="string"[CRLF]            update="false"[CRLF]            insert="true"[CRLF]            column="CUSTOMER_EMAIL"[CRLF]            length="82"[CRLF]            not-null="true"[CRLF]           [CRLF]        />[CRLF][CRLF]        <property[CRLF]            name="password"[CRLF]            type="string"[CRLF]            update="false"[CRLF]            insert="true"[CRLF]            column="CUSTOMER_PASSWORD"[CRLF]            length="10"[CRLF]            not-null="true"[CRLF]      [CRLF]        />[CRLF][CRLF]     <property[CRLF]            name="userId"[CRLF]            type="string"[CRLF]            update="false"[CRLF]            insert="true"[CRLF]            column="CUSTOMER_USERID"[CRLF]            length="12"[CRLF]            not-null="true"[CRLF]            unique="true"[CRLF]      [CRLF]        />[CRLF]    [CRLF]     <property[CRLF]            name="firstName"[CRLF]            type="string"[CRLF]            update="false"[CRLF]            insert="true"[CRLF]            column="CUSTOMER_FIRSTNAME"[CRLF]            length="25"[CRLF]            not-null="true"[CRLF]      [CRLF]        />[CRLF]        [CRLF]         <property[CRLF]            name="lastName"[CRLF]            type="string"[CRLF]            update="false"[CRLF]            insert="true"[CRLF]            column="CUSTOMER_LASTTNAME"[CRLF]            length="25"[CRLF]            not-null="true"[CRLF]      [CRLF]        />[CRLF][CRLF]    </class>[CRLF][CRLF]     [CRLF]</hibernate-mapping>[CRLF]	2009/10/06 02:02:29		j2ee
hukV5Qw	Hibernate	映射配置	<!-- Hibernate SessionFactory -->[CRLF]    <bean id="exampleSessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean">[CRLF]        <property name="dataSource"><ref local="exampleDataSource"/></property>[CRLF]        <property name="hibernateProperties">[CRLF]            <ref bean="exampleHibernateProperties" />[CRLF]        </property>[CRLF]        <!-- Must references all OR mapping files. -->[CRLF]        <property name="mappingResources">[CRLF]            <list>[CRLF]                <value>Customer.hbm.xml</value>[CRLF]                 <value>Account.hbm.xml</value>[CRLF]               </list>[CRLF]        </property>[CRLF]        [CRLF]        [CRLF]    </bean>	2009/10/06 02:03:17		j2ee
C78wgHd	Hibernate	Java类	package springexample.hibernate;[CRLF][CRLF]import java.math.BigDecimal;[CRLF]import java.util.HashSet;[CRLF]import java.util.Set;[CRLF][CRLF]public class Customer {[CRLF]    [CRLF]    private Long id = new Long(-1);[CRLF]    private String userId;[CRLF]    private String password;[CRLF]    private String email;[CRLF]    private String firstName;[CRLF]    private String lastName;[CRLF]    private BigDecimal balance;[CRLF]    [CRLF]    private Set accounts = new HashSet();[CRLF]    [CRLF]    public String getEmail() {[CRLF]        return email;[CRLF]    }[CRLF]    [CRLF]    public void setEmail(String email) {[CRLF]        this.email = email;[CRLF]    }[CRLF]    [CRLF]    public String getPassword() {[CRLF]        return password;[CRLF]    }[CRLF]    [CRLF]    public void setPassword(String password) {[CRLF]        this.password = password;[CRLF]    }[CRLF]    [CRLF]    [CRLF][CRLF]    public Long getId() {[CRLF]        return id;[CRLF]    }[CRLF]    [CRLF][CRLF]    public void setId(Long id) {[CRLF]        this.id = id;[CRLF]    }[CRLF][CRLF]    public Set getAccounts() {[CRLF]        return accounts;[CRLF]    }[CRLF]    [CRLF][CRLF]    public void setAccounts(Set accounts) {[CRLF]        this.accounts = accounts;[CRLF]    }[CRLF]    [CRLF]    public void addAccount(Account account){[CRLF]        account.setCustomer(this);[CRLF]        accounts.add(account);[CRLF]    }[CRLF][CRLF]    public BigDecimal getBalance() {[CRLF]        return balance;[CRLF]    }[CRLF]    [CRLF][CRLF]    public void setBalance(BigDecimal balance) {[CRLF]        this.balance = balance;[CRLF]    }[CRLF]    [CRLF][CRLF]    public String getFirstName() {[CRLF]        return firstName;[CRLF]    }[CRLF]    [CRLF][CRLF]    public void setFirstName(String firstName) {[CRLF]        this.firstName = firstName;[CRLF]    }[CRLF]    [CRLF][CRLF]    public String getLastName() {[CRLF]        return lastName;[CRLF]    }[CRLF]    [CRLF][CRLF]    public void setLastName(String lastName) {[CRLF]        this.lastName = lastName;[CRLF]    }[CRLF][CRLF]    public String getUserId() {[CRLF]        return userId;[CRLF]    }[CRLF]    [CRLF][CRLF]    public void setUserId(String userId) {[CRLF]        this.userId = userId;[CRLF]    }[CRLF]    [CRLF]    [CRLF]}[CRLF]	2009/10/06 02:03:47		j2ee
ttGaFfJ	Hibernate	保存数据	    Customer customer = new Customer();[CRLF]    [CRLF]    customer.setEmail("raj@malhotra.com");[CRLF]    customer.setUserId("rajmalhotra");[CRLF]    customer.setPassword("xxxxx");[CRLF]    customer.setFirstName("Raj");[CRLF]    customer.setLastName("Malhotra");[CRLF][CRLF]CustomerDAOImpl customerDAOImpl = (CustomerDAOImpl)[CRLF]    appContext.getBean("customerDAOTarget");[CRLF]    [CRLF]    customerDAOImpl.addCustomer(customer);[CRLF][CRLF]------------------------[CRLF][CRLF]public class CustomerDAOImpl extends HibernateDaoSupport implements CustomerDAO{[CRLF]    [CRLF]    [CRLF][CRLF][CRLF]    public void addCustomer(Customer customer) {[CRLF]        getHibernateTemplate().save(customer);[CRLF]        // TODO Auto-generated method stub[CRLF]        [CRLF]    }[CRLF][CRLF]    public Customer getCustomerAccountInfo(Customer customer) {[CRLF]        Customer cust = null;[CRLF]        List list = getHibernateTemplate().find("from Customer customer " +[CRLF]                                    "where customer.userId = ?" ,[CRLF]                                    customer.getUserId(),Hibernate.STRING); [CRLF]        [CRLF]        if(list.size() > 0){[CRLF]             cust = (Customer)  list.get(0);[CRLF]        }[CRLF]        [CRLF]        return cust;[CRLF]        [CRLF]        [CRLF]    }[CRLF][CRLF]}	2009/10/06 02:05:59	2009/10/06 02:07:32	j2ee
QCPIrNR				2009/10/06 02:06:19
5B83OTF	Servlet	设置值到jsp	request.getSession().setAttribute("bookdetail",this.getBookService().findBookByName(bookName));[CRLF][CRLF]jsp取得值[CRLF]<logic:present name="bookdetail">[CRLF]<bean:write name="book" property="descibe"/>[CRLF]</logic:present>	2009/10/09 22:16:39	2009/10/09 22:25:44	j2ee
h2LoYVT				2009/10/09 22:20:18
HbuozeQ				2009/10/09 22:20:18
oeIDxK8	Jsp	循环显示	<%[CRLF]String[] testArray={"str1","str2","str3"}; [CRLF]pageContext.setAttribute("test",testArray); [CRLF]%>[CRLF]<logic:iterate id="show" name="test"> [CRLF]<bean:write name="show"/> [CRLF]</logic:iterate>[CRLF]str1 [CRLF]str2 [CRLF]str3 [CRLF]----------------------[CRLF]<logic:iterate id="show" name="test" length="2" offset="1"> [CRLF]<bean:write name="show"/> [CRLF]</logic:iterate>[CRLF]str2[CRLF]str3[CRLF]-------------------------------[CRLF][CRLF]<logic:iterate id="show" name="test" length="2" offset="1" indexId="number"> [CRLF]<bean:write name="number"/>:<bean:write name="show"/> [CRLF]</logic:iterate>[CRLF]其显示结果为：[CRLF]1:str2 [CRLF]2:str3 [CRLF]-------------------------[CRLF]<%[CRLF]HashMap countries=new HashMap();[CRLF]countries.put("country1","中国");[CRLF]countries.put("country2","美国");[CRLF]countries.put("country3","英国");[CRLF]countries.put("country4","法国");[CRLF]countries.put("country5","德国");[CRLF]pageContext.setAttribute("countries",countries); [CRLF]%>[CRLF]<logic:iterate id="country" name="countries"> [CRLF]<bean:write name="country" property="key"/>:[CRLF]<bean:write name="country" property="value"/> [CRLF]</logic:iterate>[CRLF]　　在bean:write中通过property的key和value分别获得HaspMap对象的键和值。其显示结果为：[CRLF]country5:德国 [CRLF]country3:英国 [CRLF]country2:美国 [CRLF]country4:法国 [CRLF]country1:中国 [CRLF][CRLF]---------------------[CRLF]<%[CRLF]String[] colors={"red","green","blue"};[CRLF]String[] countries1={"中国","美国","法国"};[CRLF]String[] persons={"乔丹","布什","克林顿"};[CRLF]ArrayList list2=new ArrayList();[CRLF]list2.add(colors);[CRLF]list2.add(countries1);[CRLF]list2.add(persons);[CRLF]pageContext.setAttribute("list2",list2);[CRLF]%>[CRLF]<logic:iterate id="first" name="list2" indexId="numberfirst">[CRLF]<bean:write name="numberfirst"/>[CRLF]<logic:iterate id="second" name="first">[CRLF]<bean:write name="second"/>[CRLF]</logic:iterate>[CRLF]<br>[CRLF]</logic:iterate>[CRLF]　　运行效果：[CRLF]0 red green blue [CRLF]1 中国 美国 法国 [CRLF]2 乔丹 布什 克林顿 [CRLF]	2009/10/09 22:38:08	2009/10/09 22:39:42	j2ee
HsBUBiA	Spring	AOP		2009/10/13 18:37:33	2009/10/13 18:38:03	j2ee
F6GpP0n	Spring	ORM		2009/10/13 18:37:49		j2ee
5YMIyKQ				2009/10/13 18:37:55
vFU7PEQ	Spring	WEB		2009/10/13 18:38:11		j2ee
fCRhLJR	Spring	MVC		2009/10/13 18:38:18		j2ee
K76RsOY	Spring	DAO		2009/10/13 18:38:21		j2ee
rzv4XDX	Spring	Context		2009/10/13 18:38:28		j2ee
s3tAoxd	Spring	Core		2009/10/13 18:38:32		j2ee
kxDSyLz	ORM	Hibernate		2009/10/13 18:39:00		j2ee
V5pVNnw	ORM	IBatis		2009/10/13 18:39:13		j2ee
pv9GVxF	ORM	JDO		2009/10/13 18:39:19		j2ee
hAmOWSE	WEB	WebApplicationContext		2009/10/13 18:39:35		j2ee
TuAje7K	WEB	MutipartResolver		2009/10/13 18:39:44		j2ee
dgF0UM3	WEB	WebUtilities		2009/10/13 18:39:54		j2ee
ysnhRam	MVC	WebMVCFramework		2009/10/13 18:40:42		j2ee
pKEqPDH	MVC	WebViews		2009/10/13 18:41:02	2009/10/13 18:41:08	j2ee
nn6V7Wq	MVC	Jsp		2009/10/13 18:41:24		j2ee
dNwtVhk	MVC	Excel		2009/10/13 18:41:33		j2ee
MSV4qK7	DAO	TransactionInfrastruture		2009/10/13 18:41:56		j2ee
35aZSdI	DAO	JDBCSupport		2009/10/13 18:42:25		j2ee
sSzZeUj	DAO	JDOSupport		2009/10/13 18:42:37		j2ee
XzeqKMP	Context	ApplocationContext		2009/10/13 18:43:02		j2ee
wh0gt7F	Context	UISupport		2009/10/13 18:43:12		j2ee
4AZHJW9	Context	Validation		2009/10/13 18:43:16		j2ee
yqDDnfq	Context	JNDI		2009/10/13 18:43:25		j2ee
B2WW9bY	Context	EJBSupport		2009/10/13 18:43:31		j2ee
Ag8jidy	Context	RemotingMail		2009/10/13 18:43:44		j2ee
K0MA8RS	Core	SupportUtilities		2009/10/13 18:44:07		j2ee
4xpoq7V	Core	BeanContainer		2009/10/13 18:44:12		j2ee
ED26RIi	AOP	Source-levelMetadata		2009/10/13 18:44:42		j2ee
ID8OiLi	AOP	AOPInfrastruture		2009/10/13 18:44:54		j2ee
t246fd6	TW	新千岁机场	中華航空	2009/11/02 10:37:44		lvyou
2tbxjqb	新千岁机场	洞爺湖	JR 3DAY PASS	2009/11/02 10:47:51		lvyou
DrRuiPJ	新千岁机场	南千歲車站	AIRPORT	2009/11/02 10:48:51		lvyou
YT8fc5F	洞爺湖	昭和新山	巴士	2009/11/02 10:50:01		lvyou
uM25UEj	昭和新山	上山	珠山纜車	2009/11/02 10:57:23		lvyou
i2TBSL7	札幌	小樽	AIRPORT	2009/11/02 10:59:31		lvyou
ejKdbpD	东京	京都	新干线2小时40分	2009/11/18 18:40:46	2009/11/18 18:41:06	lvyou
uc3HXC5				2009/11/18 18:40:54
eKTgHor	京都	清水寺	bus100/206	2009/11/18 18:43:36		lvyou
H3OQ7w5	京都	嵐山	bus28	2009/11/18 18:44:44		lvyou
